#pragma kernel Collect
#pragma kernel Scatter
#include "GlobalIllumination.cginc"
Texture2DArray<float3> _SourceCubemap;
RWStructuredBuffer<uint3> _CoeffTemp;
RWStructuredBuffer<float3> _Coeff;
uint _OffsetIndex;
[numthreads(RESOLUTION, RESOLUTION,1)]
void Collect (uint3 id : SV_DispatchThreadID)
{
    float2 uv = (float2)id.xy / RESOLUTION;
    float3 dir = DirFromCube(id.z, uv);
    float3 radians = _SourceCubemap[id];
    SH9 sh = SHCosineLobe(dir);
    [unroll]
    for(uint i = 0; i < 9; ++i)
    {
        uint3 value = (uint3)(sh.c[i] * radians * 256.0);
        InterlockedAdd(_CoeffTemp[i].x, value.x);
        InterlockedAdd(_CoeffTemp[i].y, value.y);
        InterlockedAdd(_CoeffTemp[i].z, value.z);
    }
}

[numthreads(9, 1, 1)]
void Scatter(uint id : SV_DISPATCHTHREADID)
{
    const float count = RESOLUTION * RESOLUTION * 6;
    _Coeff[id + _OffsetIndex * 9] = (_CoeffTemp[id] / 256.0) * ((4.0 * Pi) / count);
    _CoeffTemp[id] = 0;
}