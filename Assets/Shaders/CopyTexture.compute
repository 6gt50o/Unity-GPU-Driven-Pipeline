// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel TexToBuffer RGBM
#pragma kernel BufferToTex RGBM
#pragma kernel TexToBuffer ARGB
#pragma kernel BufferToTex ARGB


   #define MAX_BRIGHTNESS 6
    uint EncodeColor(float3 rgb)
    {
        rgb = clamp(rgb, 0, MAX_BRIGHTNESS);
        float y = max(max(rgb.r, rgb.g), rgb.b);
        y = clamp(ceil(y * 255 / MAX_BRIGHTNESS), 1, 255);
        rgb *= 255 * 255 / (y * MAX_BRIGHTNESS);
        uint4 i = float4(rgb, y);
        return i.x | (i.y << 8) | (i.z << 16) | (i.w << 24);
    }

    float4 Decode(uint value)
{
    uint4 values = 0;
    values.x = value & 255;
    value >>= 8;
    values.y = value & 255;
    value >>= 8;
    values.z = value & 255;
    value >>= 8;
    values.w = value & 255;
    return values / 255.0;
}
uint Encode(float4 value)
{
    uint4 v = value * 255;
    uint result = 0;
    result |= v.w & 255;
    result <<= 8;
    result |= v.z & 255;
    result <<= 8;
    result |= v.y & 255;
    result <<= 8;
    result |= v.x & 255;
    return result;
}

    float3 DecodeColor(uint data)
    {
        float r = (data      ) & 0xff;
        float g = (data >>  8) & 0xff;
        float b = (data >> 16) & 0xff;
        float a = (data >> 24) & 0xff;
        return float3(r, g, b) * a * MAX_BRIGHTNESS / (255 * 255);
    }

    uint DownDim(uint2 uv, uint width)
    {
        return uv.y * width + uv.x;
    }

Texture2D<float4> _InputTex;
RWTexture2DArray<float4> _OutputTex;
RWStructuredBuffer<uint> _Buffer;
uint _Width;
uint _OffsetIndex;
uint _Scale;
[numthreads(8,8,1)]
void TexToBuffer (uint2 id : SV_DispatchThreadID)
{
    uint index = DownDim(id, _Width);
    #ifdef RGBM
    _Buffer[index] = EncodeColor(_InputTex[id].xyz);
    #endif
    #ifdef ARGB
    _Buffer[index] = Encode(_InputTex[id]);
    #endif
}

[numthreads(8,8,1)]
void BufferToTex (uint2 id : SV_DispatchThreadID)
{
    uint index = DownDim(id / _Scale, _Width);
    #ifdef RGBM
    _OutputTex[uint3(id, _OffsetIndex)] = float4(DecodeColor(_Buffer[index]), 1);
    #endif
    #ifdef ARGB
    _OutputTex[uint3(id, _OffsetIndex)] = Decode(_Buffer[index]);
    #endif
}